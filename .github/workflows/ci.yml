name: CI & Deploy

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ecommerce
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/ecommerce
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      CORS_ORIGIN: http://localhost:5173
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      VITE_API_URL: http://localhost:5173/api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci --silent --ignore-scripts
      - name: Prepare .env file
        run: |
          echo "DATABASE_URL=${DATABASE_URL}" > .env
          echo "JWT_SECRET=${JWT_SECRET}" >> .env
          echo "CORS_ORIGIN=${CORS_ORIGIN}" >> .env
          echo "STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}" >> .env
          echo "VITE_API_URL=${VITE_API_URL}" >> .env
      - name: Wait for DB
        run: |
          for i in {1..30}; do pg_isready -h localhost -p 5432 -U postgres && break; echo "Waiting for DB..."; sleep 2; done
      - name: Run migrations
        run: npm run migrate:push
      - name: Seed database
        run: npm run seed
      - name: Run unit tests
        run: npm run test
      - name: Run E2E tests
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: BerniWittmann/background-server-action@v1
        with:
          build: npm run build
          start: npm run start
          wait-on: 'http://localhost:8080/api/health,http://localhost:5173'
          command: npm run test:e2e

  deploy-preview:
    if: github.event_name == 'pull_request'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm ci
      - name: Build frontend
        run: npm run build --prefix apps/frontend
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Deploy to Vercel (Preview)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel deploy --token $VERCEL_TOKEN --confirm \
            --org-id $VERCEL_ORG_ID --project-id $VERCEL_PROJECT_ID \
            --cwd apps/frontend

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm ci
      - name: Build frontend
        run: npm run build --prefix apps/frontend
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Deploy to Vercel (Production)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel deploy --prod --token $VERCEL_TOKEN --confirm \
            --org-id $VERCEL_ORG_ID --project-id $VERCEL_PROJECT_ID \
            --cwd apps/frontend