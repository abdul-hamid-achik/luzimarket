name: CI & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ecommerce
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
      pg_proxy:
        image: ghcr.io/neondatabase/wsproxy:latest
        env:
          APPEND_PORT: 'db:5432'
          ALLOW_ADDR_REGEX: '.*'
          LOG_TRAFFIC: 'true'
    env:
      TAG: ${{ github.sha }}
      DATABASE_URL: postgres://postgres:password@localhost:5432/ecommerce
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      CORS_ORIGIN: http://localhost:5173
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      VITE_API_URL: http://localhost:5173/api
      PORT: 6000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --silent --ignore-scripts

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Generate .env file
        run: |
          echo "DATABASE_URL=${DATABASE_URL}" > .env
          echo "JWT_SECRET=${JWT_SECRET}" >> .env
          echo "CORS_ORIGIN=${CORS_ORIGIN}" >> .env
          echo "STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}" >> .env
          echo "VITE_API_URL=${VITE_API_URL}" >> .env
          echo "PORT=${PORT}" >> .env

      - name: Wait for DB
        run: |
          for i in {1..30}; do pg_isready -h localhost -U postgres && break; echo "Waiting for DB..."; sleep 2; done

      - name: Run migrations
        run: npm run migrate:push

      - name: Seed database
        run: npm run seed

      - name: Build backend
        run: npm run build:backend

      - name: Build frontend
        run: npm run build:frontend

      - name: Start backend and frontend
        run: |
          npm --workspace=apps/backend run start &
          npm --workspace=apps/frontend run preview &
          for i in {1..30}; do curl --fail http://localhost:${PORT}/api/health && break; echo "Waiting for backend..."; sleep 2; done
          for i in {1..30}; do curl --fail http://localhost:5173 && break; echo "Waiting for frontend..."; sleep 2; done

      - name: Run E2E Tests
        run: npm run test:e2e

      - name: Build for Vercel
        run: |
          npm run build:frontend
          npm run build:backend
          mkdir -p .vercel/output

      - name: Upload Vercel build output
        uses: actions/upload-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output

  deploy_preview:
    if: github.event_name == 'pull_request'
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build output
        uses: actions/download-artifact@v4
        with:
          name: vercel-output
          path: .vercel/output

      - name: Deploy Preview to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token:      ${{ secrets.VERCEL_TOKEN }}
          zeit-token:        ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id:     ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args:       --prebuilt

  deploy_prod:
    if: github.ref == 'refs/heads/main'
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build output
        uses: actions/download-artifact@v3
        with:
          name: vercel-output
          path: .vercel/output

      - name: Deploy Production to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token:      ${{ secrets.VERCEL_TOKEN }}
          zeit-token:        ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id:     ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args:       --prebuilt --prod