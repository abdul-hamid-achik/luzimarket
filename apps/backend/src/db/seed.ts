import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables from root .env file
dotenv.config({ path: path.resolve(__dirname, '../../../../.env') });

import { db } from './index';
import bcrypt from 'bcryptjs';
import { faker } from '@faker-js/faker/locale/es';
import { eq, sql } from 'drizzle-orm';
import type { NeonDatabase } from 'drizzle-orm/neon-serverless';
import { imageService } from './services/imageService';
import { spanishProducts, spanishCategories, spanishOccasions } from './data/spanishProducts';
import { additionalSpanishProducts } from './data/additionalProducts';

// Define types for the schema module
type PostgresSchemaModule = typeof import('./schema.postgres');

// Predefined static values
const sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
// const orderStatuses = ['pending', 'processing', 'shipped', 'delivered', 'cancelled', 'returned'];
const petitionTypes = ['Pregunta', 'Queja', 'Sugerencia', 'Comentario', 'Problema T√©cnico'];
const petitionStatuses = ['pending', 'in-review', 'approved', 'rejected', 'on-hold'];

const statesData = [
    { label: 'Coahuila', value: 'coahuila' },
    { label: 'Chihuahua', value: 'chihuahua' },
    { label: 'Durango', value: 'durango' },
    { label: 'Nuevo Le√≥n', value: 'nuevo-leon' },
    { label: 'Ciudad de M√©xico', value: 'cdmx' },
];

const deliveryZonesData = [
    { name: 'Torre√≥n', fee: 5000, isActive: true, description: 'Entrega en Torre√≥n, Coahuila - $50 pesos' }, // $50 pesos - Coahuila
    { name: 'Saltillo', fee: 7500, isActive: true, description: 'Entrega en Saltillo, Coahuila - $75 pesos' }, // $75 pesos - Coahuila
    { name: 'Monterrey', fee: 12000, isActive: true, description: 'Entrega en Monterrey, Nuevo Le√≥n - $120 pesos' }, // $120 pesos - Nuevo Le√≥n
    { name: 'Chihuahua', fee: 14000, isActive: true, description: 'Entrega en Chihuahua, Chihuahua - $140 pesos' }, // $140 pesos - Chihuahua
    { name: 'Ciudad Ju√°rez', fee: 15000, isActive: true, description: 'Entrega en Ciudad Ju√°rez, Chihuahua - $150 pesos' }, // $150 pesos - Chihuahua
    { name: 'G√≥mez Palacio', fee: 6000, isActive: true, description: 'Entrega en G√≥mez Palacio, Durango - $60 pesos' }, // $60 pesos - Durango
    { name: 'Lerdo', fee: 6500, isActive: true, description: 'Entrega en Lerdo, Durango - $65 pesos' }, // $65 pesos - Durango
    { name: 'CDMX', fee: 18000, isActive: true, description: 'Entrega en Ciudad de M√©xico - $180 pesos' }, // $180 pesos - CDMX
];

// Homepage slides data will be created dynamically using enhanced image service
const homepageSlidesTemplates = [
    {
        title: 'Bienvenido a LUZI MARKET',
        subtitle: 'Experiencia de Lujo',
        description: 'Descubre una experiencia de compra √∫nica con productos cuidadosamente seleccionados para ti.',
        buttonText: 'Explorar Ahora',
        buttonLink: '/handpicked/productos',
        backgroundColor: '#1a1a1a',
        textColor: '#ffffff',
        position: 'center' as const,
        isActive: true,
        sortOrder: 3
    },
    {
        title: 'Colecci√≥n Premium 2025',
        subtitle: 'Los Mejores Productos',
        description: 'Explora nuestra selecci√≥n exclusiva de productos de la m√°s alta calidad.',
        buttonText: 'Ver Colecci√≥n',
        buttonLink: '/handpicked/productos',
        backgroundColor: '#ffffff',
        textColor: '#000000',
        position: 'left' as const,
        isActive: true,
        sortOrder: 2
    },
    {
        title: 'Regalos Especiales',
        subtitle: 'Para Momentos √önicos',
        description: 'Encuentra el regalo perfecto para esas ocasiones especiales que nunca se olvidan.',
        buttonText: 'Buscar Regalos',
        buttonLink: '/handpicked/productos',
        backgroundColor: '#2d3748',
        textColor: '#ffffff',
        position: 'right' as const,
        isActive: true,
        sortOrder: 1
    }
];

async function seed(currentDb: NeonDatabase, currentSchema: PostgresSchemaModule): Promise<void> {
    try {
        const seedId = Math.floor(Math.random() * 1000000);
        faker.seed(seedId);
        console.log('üå± Iniciando siembra de datos en espa√±ol con im√°genes...');

        // PostgreSQL Database
        const dbInstance = currentDb as NeonDatabase;
        const schemaInstance = currentSchema as PostgresSchemaModule;

        // Seed sizes
        try {
            for (const size of sizes) {
                await dbInstance.insert(schemaInstance.sizes).values({ size }).onConflictDoNothing();
            }
            console.log('‚úÖ Tallas sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando tallas (PostgreSQL):', err); }

        // Seed states
        try {
            for (const state of statesData) {
                await dbInstance.insert(schemaInstance.states).values(state).onConflictDoNothing();
            }
            console.log('‚úÖ Estados sembrados exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando estados (PostgreSQL):', err); }

        // Seed delivery zones
        try {
            for (const zone of deliveryZonesData) {
                await dbInstance.insert(schemaInstance.deliveryZones).values(zone).onConflictDoNothing();
            }
            console.log('‚úÖ Zonas de entrega sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando zonas de entrega (PostgreSQL):', err); }

        // Seed Spanish categories
        try {
            for (const category of spanishCategories) {
                await dbInstance.insert(schemaInstance.categories).values(category).onConflictDoNothing();
            }
            console.log('‚úÖ Categor√≠as en espa√±ol sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando categor√≠as (PostgreSQL):', err); }

        // Seed Spanish occasions
        try {
            for (const occasion of spanishOccasions) {
                await dbInstance.insert(schemaInstance.occasions).values(occasion).onConflictDoNothing();
            }
            console.log('‚úÖ Ocasiones en espa√±ol sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando ocasiones (PostgreSQL):', err); }

        // Seed Spanish products with images
        try {
            const categoriesResult = await dbInstance.select().from(schemaInstance.categories);
            const categoryMap = new Map(categoriesResult.map(cat => [cat.slug, cat.id]));

            console.log('üì∏ Iniciando carga de productos con im√°genes...');
            
            // Combine original and additional products
            const allProducts = [...spanishProducts, ...additionalSpanishProducts];
            console.log(`üì¶ Total de productos a cargar: ${allProducts.length}`);
            
            // Process products in batches to manage API limits
            const BATCH_SIZE = 50; // Process 50 products at a time
            const batches = Math.ceil(allProducts.length / BATCH_SIZE);
            
            for (let batch = 0; batch < batches; batch++) {
                const startIdx = batch * BATCH_SIZE;
                const endIdx = Math.min(startIdx + BATCH_SIZE, allProducts.length);
                const batchProducts = allProducts.slice(startIdx, endIdx);
                
                console.log(`\nüîÑ Procesando lote ${batch + 1}/${batches} (productos ${startIdx + 1}-${endIdx})`);
                
                // Check Unsplash rate limit status
                const rateLimitStatus = imageService.getRateLimitStatus();
                console.log(`üìä Estado de l√≠mite Unsplash: ${rateLimitStatus.requestsUsed}/50 solicitudes usadas`);
                
                if (rateLimitStatus.requestsRemaining < 10) {
                    console.log(`‚ö†Ô∏è  Pocas solicitudes Unsplash restantes. Usando im√°genes locales y placeholders.`);
                }

            for (let i = 0; i < batchProducts.length; i++) {
                const product = batchProducts[i];
                const globalIndex = startIdx + i;
                const categoryId = categoryMap.get(product.categorySlug);

                if (categoryId) {
                    console.log(`üì¶ Procesando producto ${globalIndex + 1}/${allProducts.length}: ${product.name}`);

                    const productData = {
                        slug: faker.helpers.slugify(product.name.toLowerCase()),
                        name: product.name,
                        description: product.description,
                        price: product.price,
                        categoryId
                    };

                    const insertedProduct = await dbInstance.insert(schemaInstance.products)
                        .values(productData)
                        .returning({ id: schemaInstance.products.id })
                        .onConflictDoNothing();

                    let productId;

                    if (insertedProduct.length > 0) {
                        // New product was inserted
                        productId = insertedProduct[0].id;

                        // Create a default variant for each product
                        await dbInstance.insert(schemaInstance.productVariants).values({
                            productId,
                            sku: `SKU-${faker.string.alphanumeric(8).toUpperCase()}`,
                            attributes: JSON.stringify({
                                size: 'Est√°ndar',
                                color: 'Natural',
                                material: 'Premium'
                            }),
                            stock: faker.number.int({ min: 5, max: 50 })
                        }).onConflictDoNothing();
                    } else {
                        // Product already exists, find its ID
                        const existingProduct = await dbInstance
                            .select({ id: schemaInstance.products.id })
                            .from(schemaInstance.products)
                            .where(eq(schemaInstance.products.slug, productData.slug))
                            .limit(1);

                        if (existingProduct.length > 0) {
                            productId = existingProduct[0].id;
                        }
                    }

                    if (productId) {
                        // Check if product already has images in the database
                        const hasExistingImages = await imageService.checkExistingImages(
                            dbInstance,
                            schemaInstance,
                            productId
                        );

                        if (hasExistingImages) {
                            console.log(`‚ôªÔ∏è  Producto ${product.name} ya tiene im√°genes, saltando...`);
                            continue;
                        }

                        // Upload images for the product
                        try {
                            console.log(`üñºÔ∏è  Cargando im√°genes para: ${product.name}`);
                            const imageResult = await imageService.getImageForProduct(
                                product.categorySlug,
                                productId,
                                product.name
                            );

                            if (imageResult.success) {
                                await dbInstance.insert(schemaInstance.photos).values({
                                    url: imageResult.url,
                                    alt: imageResult.alt,
                                    sortOrder: 0,
                                    productId
                                }).onConflictDoNothing();

                                if (imageResult.isExisting) {
                                    console.log(`‚ôªÔ∏è  Imagen existente reutilizada para: ${product.name}`);
                                } else {
                                    console.log(`‚úÖ Nueva imagen cargada exitosamente para: ${product.name}`);
                                }
                            } else {
                                console.log(`‚ö†Ô∏è  Imagen con fallback para: ${product.name} - ${imageResult.error}`);
                                // Still save the image even if upload failed
                                await dbInstance.insert(schemaInstance.photos).values({
                                    url: imageResult.url,
                                    alt: imageResult.alt,
                                    sortOrder: 0,
                                    productId
                                }).onConflictDoNothing();
                            }
                        } catch (imageError) {
                            console.log(`‚ùå Error cargando imagen para ${product.name}:`, imageError);
                        }
                    }
                }
            }
                
                // Add a small delay between batches to avoid overwhelming the API
                if (batch < batches - 1) {
                    console.log(`‚è∏Ô∏è  Pausa entre lotes (2 segundos)...`);
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }
            
            console.log('\nüìä Resumen de carga de im√°genes:');
            const finalRateLimitStatus = imageService.getRateLimitStatus();
            console.log(`   ‚Ä¢ Solicitudes Unsplash usadas: ${finalRateLimitStatus.requestsUsed}/50`);
            console.log(`   ‚Ä¢ Productos procesados: ${allProducts.length}`);
            console.log('‚úÖ Productos en espa√±ol con im√°genes sembrados exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando productos (PostgreSQL):', err); }

        // Seed realistic user accounts (admins, employees, customers, vendors)
        try {
            const users = [
                // Admin accounts
                {
                    email: 'admin@luzimarket.shop',
                    password: bcrypt.hashSync('LuziAdmin2024!', 10),
                    name: 'Administrador Principal',
                    role: 'admin' as const
                },
                {
                    email: 'maria.admin@luzimarket.shop',
                    password: bcrypt.hashSync('MariaAdmin123!', 10),
                    name: 'Mar√≠a Gonz√°lez',
                    role: 'admin' as const
                },
                // Employee accounts
                {
                    email: 'carlos.ventas@luzimarket.shop',
                    password: bcrypt.hashSync('Carlos123!', 10),
                    name: 'Carlos Ram√≠rez',
                    role: 'employee' as const
                },
                {
                    email: 'ana.marketing@luzimarket.shop',
                    password: bcrypt.hashSync('Ana123!', 10),
                    name: 'Ana Mart√≠nez',
                    role: 'employee' as const
                },
                {
                    email: 'luis.inventario@luzimarket.shop',
                    password: bcrypt.hashSync('Luis123!', 10),
                    name: 'Luis Hern√°ndez',
                    role: 'employee' as const
                },
                // Vendor accounts
                {
                    email: 'proveedor1@email.com',
                    password: bcrypt.hashSync('Proveedor123!', 10),
                    name: 'Distribuidora Premium',
                    role: 'vendor' as const
                },
                {
                    email: 'proveedor2@email.com',
                    password: bcrypt.hashSync('Proveedor123!', 10),
                    name: 'Productos de Lujo SA',
                    role: 'vendor' as const
                },
                // Customer accounts
                {
                    email: 'sofia.cliente@email.com',
                    password: bcrypt.hashSync('Sofia123!', 10),
                    name: 'Sof√≠a L√≥pez',
                    role: 'customer' as const
                },
                {
                    email: 'diego.comprador@email.com',
                    password: bcrypt.hashSync('Diego123!', 10),
                    name: 'Diego Morales',
                    role: 'customer' as const
                },
                {
                    email: 'carmen.user@email.com',
                    password: bcrypt.hashSync('Carmen123!', 10),
                    name: 'Carmen Ruiz',
                    role: 'customer' as const
                },
                {
                    email: 'rafael.cliente@email.com',
                    password: bcrypt.hashSync('Rafael123!', 10),
                    name: 'Rafael Torres',
                    role: 'customer' as const
                },
                {
                    email: 'lucia.compras@email.com',
                    password: bcrypt.hashSync('Lucia123!', 10),
                    name: 'Luc√≠a Fern√°ndez',
                    role: 'customer' as const
                }
            ];

            for (const user of users) {
                await dbInstance.insert(schemaInstance.users).values(user).onConflictDoNothing();
            }
            console.log('‚úÖ Usuarios realistas sembrados exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando usuarios (PostgreSQL):', err); }

        // Seed employee records for employee users
        try {
            // const employeeUsers = await dbInstance.select().from(schemaInstance.users).where(eq(schemaInstance.users.role, 'employee'));

            const employeeData = [
                {
                    nombre: 'Carlos Ram√≠rez',
                    puesto: 'Gerente de Ventas',
                    email: 'carlos.ventas@luzimarket.shop'
                },
                {
                    nombre: 'Ana Mart√≠nez',
                    puesto: 'Especialista en Marketing',
                    email: 'ana.marketing@luzimarket.shop'
                },
                {
                    nombre: 'Luis Hern√°ndez',
                    puesto: 'Coordinador de Inventario',
                    email: 'luis.inventario@luzimarket.shop'
                }
            ];

            for (const empleado of employeeData) {
                await dbInstance.insert(schemaInstance.empleados).values({
                    ...empleado
                }).onConflictDoNothing();
            }
            console.log('‚úÖ Registros de empleados sembrados exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando empleados (PostgreSQL):', err); }

        // Seed vendor records for vendor users
        try {
            const vendorUsers = await dbInstance.select().from(schemaInstance.users).where(eq(schemaInstance.users.role, 'vendor'));

            if (vendorUsers.length > 0) {
                const vendorData = [
                    {
                        userId: vendorUsers[0]?.id,
                        businessName: 'Distribuidora Premium',
                        contactPerson: 'Jos√© Mar√≠a S√°nchez',
                        phone: '+52 871 123 4567',
                        address: 'Av. Ju√°rez 1234, Torre√≥n, Coahuila',
                        taxId: 'DPR240101ABC',
                        commissionRate: 8,
                        status: 'approved' as const
                    },
                    {
                        userId: vendorUsers[1]?.id,
                        businessName: 'Productos de Lujo SA',
                        contactPerson: 'Elena Vargas',
                        phone: '+52 871 987 6543',
                        address: 'Blvd. Revoluci√≥n 5678, Saltillo, Coahuila',
                        taxId: 'PLU240101XYZ',
                        commissionRate: 12,
                        status: 'approved' as const
                    }
                ];

                for (const vendor of vendorData) {
                    if (vendor.userId) {
                        await dbInstance.insert(schemaInstance.vendors).values(vendor).onConflictDoNothing();
                    }
                }
                console.log('‚úÖ Registros de proveedores sembrados exitosamente (PostgreSQL)');
            }
        } catch (err) { console.log('‚ùå Error sembrando proveedores (PostgreSQL):', err); }

        // Seed sessions and cart items for realistic shopping behavior
        try {
            const allUsers = await dbInstance.select().from(schemaInstance.users);
            const customerUsers = allUsers.filter(user => user.role === 'customer');

            // Create sessions for customers and some guest sessions
            const sessions = [];

            // Customer sessions
            for (const customer of customerUsers) {
                sessions.push({
                    userId: customer.id,
                    isGuest: false
                });
            }

            // Guest sessions (simulating anonymous users browsing)
            for (let i = 0; i < 3; i++) {
                sessions.push({
                    userId: null,
                    isGuest: true
                });
            }

            for (const sessionData of sessions) {
                const insertedSession = await dbInstance
                    .insert(schemaInstance.sessions)
                    .values(sessionData)
                    .returning({ id: schemaInstance.sessions.id });

                // Add cart items to some sessions
                if (insertedSession.length > 0 && Math.random() < 0.6) { // 60% chance of having cart items
                    const sessionId = insertedSession[0].id;
                    const variants = await dbInstance.select().from(schemaInstance.productVariants).limit(10);

                    if (variants.length > 0) {
                        const numCartItems = faker.number.int({ min: 1, max: 4 });
                        const selectedVariants = faker.helpers.arrayElements(variants, numCartItems);

                        for (const variant of selectedVariants) {
                            await dbInstance.insert(schemaInstance.cartItems).values({
                                sessionId,
                                variantId: variant.id,
                                quantity: faker.number.int({ min: 1, max: 3 })
                            });
                        }
                    }
                }
            }
            console.log('‚úÖ Sesiones y carritos sembrados exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando sesiones y carritos (PostgreSQL):', err); }

        // Seed favorites for customers
        try {
            const customerUsers = await dbInstance.select().from(schemaInstance.users).where(eq(schemaInstance.users.role, 'customer'));
            const variants = await dbInstance.select().from(schemaInstance.productVariants).limit(20);

            for (const customer of customerUsers) {
                // Each customer has 2-6 favorite items
                const numFavorites = faker.number.int({ min: 2, max: 6 });
                const favoriteVariants = faker.helpers.arrayElements(variants, numFavorites);

                for (const variant of favoriteVariants) {
                    await dbInstance.insert(schemaInstance.favorites).values({
                        userId: customer.id,
                        variantId: variant.id
                    }).onConflictDoNothing();
                }
            }
            console.log('‚úÖ Favoritos de clientes sembrados exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando favoritos (PostgreSQL):', err); }

        // Seed realistic orders with diverse patterns
        try {
            const allUsers = await dbInstance.select().from(schemaInstance.users);
            const productsWithVariants = await dbInstance
                .select({
                    productId: schemaInstance.products.id,
                    productName: schemaInstance.products.name,
                    productPrice: schemaInstance.products.price,
                    variantId: schemaInstance.productVariants.id,
                })
                .from(schemaInstance.products)
                .leftJoin(schemaInstance.productVariants, eq(schemaInstance.productVariants.productId, schemaInstance.products.id));

            if (productsWithVariants.length > 0 && allUsers.length > 0) {
                const numberOfOrders = 75; // Create 75 orders for realistic data
                console.log(`üì¶ Creando ${numberOfOrders} √≥rdenes realistas con informaci√≥n de env√≠o mexicana...`);

                // Mexican shipping carriers
                const mexicanCarriers = ['estafeta', 'correos_mexico', 'fedex', 'ups', 'dhl', 'paquete_express', '99minutos'];
                const shippingServices = ['standard', 'express', 'economy', 'same_day', 'overnight'];

                for (let i = 0; i < numberOfOrders; i++) {
                    // Randomly select a user for the order
                    const randomUser = faker.helpers.arrayElement(allUsers);

                    // Create more realistic order dates using PostgreSQL SQL functions
                    let orderDateSql;
                    if (Math.random() < 0.4) {
                        // 40% recent orders (last 30 days)
                        const daysAgo = faker.number.int({ min: 1, max: 30 });
                        orderDateSql = sql`NOW() - INTERVAL '${sql.raw(daysAgo.toString())} days'`;
                    } else if (Math.random() < 0.7) {
                        // 30% medium recent (30-90 days ago)
                        const daysAgo = faker.number.int({ min: 31, max: 90 });
                        orderDateSql = sql`NOW() - INTERVAL '${sql.raw(daysAgo.toString())} days'`;
                    } else {
                        // 30% older orders (90-180 days ago)
                        const daysAgo = faker.number.int({ min: 91, max: 180 });
                        orderDateSql = sql`NOW() - INTERVAL '${sql.raw(daysAgo.toString())} days'`;
                    }

                    // More realistic status distribution
                    let status, paymentStatus, shippingCarrier, shippingService, trackingNumber;
                    const statusRandom = Math.random();
                    if (statusRandom < 0.6) {
                        status = 'delivered';
                        paymentStatus = 'succeeded';
                    } else if (statusRandom < 0.8) {
                        status = 'shipped';
                        paymentStatus = 'succeeded';
                    } else if (statusRandom < 0.9) {
                        status = 'processing';
                        paymentStatus = 'succeeded';
                    } else if (statusRandom < 0.95) {
                        status = 'pending';
                        paymentStatus = 'pending';
                    } else {
                        status = 'cancelled';
                        paymentStatus = 'failed';
                    }

                    // Add shipping details for shipped/delivered orders
                    if (status === 'shipped' || status === 'delivered') {
                        shippingCarrier = faker.helpers.arrayElement(mexicanCarriers);
                        shippingService = faker.helpers.arrayElement(shippingServices);
                        // Generate Mexican tracking number
                        const trackingSuffix = faker.string.alphanumeric(8).toUpperCase();
                        trackingNumber = `LZ${new Date().getFullYear().toString().slice(-2)}${faker.string.numeric(6)}${trackingSuffix}`;
                    }

                    // Add 1-5 items per order with realistic pricing
                    const itemsPerOrder = faker.number.int({ min: 1, max: 5 });
                    const selectedVariants = faker.helpers.arrayElements(
                        productsWithVariants.filter(v => v.variantId),
                        Math.min(itemsPerOrder, productsWithVariants.filter(v => v.variantId).length)
                    );

                    let orderTotal = 0;
                    const orderItemsData = [];

                    for (const variant of selectedVariants) {
                        if (variant.variantId) {
                            const quantity = faker.number.int({ min: 1, max: 3 });
                            // Use product price with some variation (¬±20%)
                            const priceVariation = 1 + (Math.random() - 0.5) * 0.4; // ¬±20%
                            const itemPrice = Math.round((variant.productPrice || 50000) * priceVariation);

                            orderTotal += itemPrice * quantity;
                            orderItemsData.push({
                                variantId: variant.variantId,
                                quantity,
                                price: itemPrice
                            });
                        }
                    }

                    const orderData = {
                        userId: randomUser.id,
                        total: orderTotal,
                        status,
                        payment_status: paymentStatus,
                        shipping_carrier: shippingCarrier,
                        shipping_service: shippingService,
                        tracking_number: trackingNumber,
                        createdAt: orderDateSql
                    };

                    const insertedOrder = await dbInstance
                        .insert(schemaInstance.orders)
                        .values(orderData)
                        .returning({ id: schemaInstance.orders.id });

                    if (insertedOrder.length > 0) {
                        const orderId = insertedOrder[0].id;

                        // Insert all order items
                        for (const itemData of orderItemsData) {
                            await dbInstance.insert(schemaInstance.orderItems).values({
                                orderId,
                                ...itemData
                            });
                        }
                    }

                    // Show progress every 15 orders
                    if ((i + 1) % 15 === 0) {
                        console.log(`‚úÖ Procesadas ${i + 1}/${numberOfOrders} √≥rdenes realistas con env√≠o mexicano`);
                    }
                }
                console.log('‚úÖ √ìrdenes realistas con env√≠o mexicano sembradas exitosamente (PostgreSQL)');
            } else {
                console.log('‚ö†Ô∏è  No se encontraron productos o usuarios para crear √≥rdenes');
            }
        } catch (err) { console.log('‚ùå Error sembrando √≥rdenes realistas (PostgreSQL):', err); }

        // Seed realistic notifications for admin dashboard
        try {
            console.log('üîî Creando notificaciones realistas para dashboard de admin...');

            // Get some real data for notifications
            const recentOrders = await dbInstance.select().from(schemaInstance.orders).limit(10);
            // These queries are used to generate realistic notification messages below
            await dbInstance.select().from(schemaInstance.vendors).limit(5);
            await dbInstance.select().from(schemaInstance.products).limit(20);

            const notificationTemplates = [
                // Vendor requests
                {
                    type: 'vendor_request',
                    severity: 'warning',
                    title: 'Nueva solicitud de vendedor',
                    message: 'Artesan√≠as Mexicanas ha solicitado unirse como vendedor en la plataforma',
                    category: 'vendors',
                    actionRequired: true,
                    data: { vendorName: 'Artesan√≠as Mexicanas', email: 'contacto@artesanias.mx' }
                },
                {
                    type: 'vendor_request',
                    severity: 'warning',
                    title: 'Solicitud de vendedor pendiente',
                    message: 'Productos Tradicionales de Coahuila solicita aprobaci√≥n para vender',
                    category: 'vendors',
                    actionRequired: true,
                    data: { vendorName: 'Productos Tradicionales de Coahuila', email: 'ventas@tradicionales.mx' }
                },
                // Stock issues
                {
                    type: 'low_stock',
                    severity: 'warning',
                    title: 'Inventario bajo',
                    message: 'Tetera de barro artesanal tiene menos de 5 unidades disponibles',
                    category: 'inventory',
                    actionRequired: true,
                    data: { productName: 'Tetera de barro artesanal', currentStock: 3 }
                },
                {
                    type: 'low_stock',
                    severity: 'error',
                    title: 'Producto agotado',
                    message: 'Servilletas bordadas a mano est√°n agotadas',
                    category: 'inventory',
                    actionRequired: true,
                    data: { productName: 'Servilletas bordadas a mano', currentStock: 0 }
                },
                // Payment issues
                {
                    type: 'payment_failed',
                    severity: 'error',
                    title: 'Pago fallido',
                    message: 'Orden por $1,250 pesos rechazada por el banco - tarjeta expirada',
                    category: 'payments',
                    actionRequired: true,
                    data: { amount: 125000, reason: 'expired_card' }
                },
                {
                    type: 'payment_failed',
                    severity: 'error',
                    title: 'Problema con procesador de pagos',
                    message: 'Stripe reporta problemas con pagos en pesos mexicanos',
                    category: 'payments',
                    actionRequired: true,
                    data: { processor: 'stripe', currency: 'MXN' }
                },
                // Delivery issues
                {
                    type: 'delivery_issue',
                    severity: 'warning',
                    title: 'Problema de entrega en Torre√≥n',
                    message: 'Estafeta reporta retraso en entregas por condiciones clim√°ticas',
                    category: 'orders',
                    actionRequired: true,
                    data: { carrier: 'estafeta', zone: 'Torre√≥n', reason: 'weather' }
                },
                {
                    type: 'delivery_issue',
                    severity: 'error',
                    title: 'Direcci√≥n incorrecta',
                    message: 'Cliente reporta direcci√≥n de entrega incorrecta en orden',
                    category: 'orders',
                    actionRequired: true,
                    data: { customer: 'Mar√≠a Garc√≠a', issue: 'wrong_address' }
                },
                // Customer petitions
                {
                    type: 'customer_petition',
                    severity: 'info',
                    title: 'Nueva petici√≥n de cliente',
                    message: 'Solicitud de productos org√°nicos en la categor√≠a de alimentos artesanales',
                    category: 'petitions',
                    actionRequired: false,
                    data: { petitionType: 'product_request', category: 'alimentos' }
                },
                {
                    type: 'customer_petition',
                    severity: 'info',
                    title: 'Sugerencia de mejora',
                    message: 'Cliente sugiere agregar opci√≥n de entrega en horario nocturno',
                    category: 'petitions',
                    actionRequired: false,
                    data: { petitionType: 'improvement', feature: 'night_delivery' }
                },
                // Sales achievements
                {
                    type: 'high_sales',
                    severity: 'success',
                    title: 'Meta de ventas superada',
                    message: 'Las ventas de hoy superaron la meta diaria en un 125%',
                    category: 'sales',
                    actionRequired: false,
                    data: { salesAmount: 87500, target: 70000, percentage: 125 }
                },
                {
                    type: 'high_sales',
                    severity: 'success',
                    title: 'Producto m√°s vendido',
                    message: 'Rebozos de Saltillo fueron el producto m√°s vendido esta semana',
                    category: 'sales',
                    actionRequired: false,
                    data: { productName: 'Rebozos de Saltillo', unitsSold: 45 }
                },
                // System notifications
                {
                    type: 'system_maintenance',
                    severity: 'info',
                    title: 'Mantenimiento programado',
                    message: 'Mantenimiento del sistema programado para el domingo de 2:00 AM a 4:00 AM',
                    category: 'system',
                    actionRequired: false,
                    data: { date: '2025-02-02', startTime: '02:00', endTime: '04:00', timezone: 'America/Mexico_City' }
                },
                {
                    type: 'system_update',
                    severity: 'info',
                    title: 'Actualizaci√≥n completada',
                    message: 'Sistema de notificaciones actualizado con mejoras de rendimiento',
                    category: 'system',
                    actionRequired: false,
                    data: { version: '2.1.0', features: ['real-time updates', 'performance improvements'] }
                }
            ];

            // Create notifications with realistic timestamps
            for (let i = 0; i < notificationTemplates.length; i++) {
                const template = notificationTemplates[i];

                // Create timestamps ranging from 1 hour to 7 days ago
                const hoursAgo = faker.number.int({ min: 1, max: 168 }); // 1 hour to 7 days
                const notificationDateSql = sql`NOW() - INTERVAL '${sql.raw(hoursAgo.toString())} hours'`;

                // Set expiration for some notifications (7 days from creation)
                let expiresAt = null;
                if (['system_maintenance', 'system_update', 'high_sales'].includes(template.type)) {
                    expiresAt = sql`NOW() + INTERVAL '7 days'`;
                }

                // Mark some as read (60% unread for urgency)
                const isRead = Math.random() < 0.4;

                const notificationData = {
                    ...template,
                    severity: template.severity as 'info' | 'warning' | 'error' | 'success',
                    isRead,
                    expiresAt,
                    createdAt: notificationDateSql,
                    updatedAt: notificationDateSql
                };

                await dbInstance.insert(schemaInstance.notifications).values(notificationData).onConflictDoNothing();
            }

            // Create some order-specific notifications using real order data
            for (const order of recentOrders.slice(0, 5)) {
                const orderNotification = {
                    type: 'order_update',
                    severity: (order.status === 'delivered' ? 'success' : 'info') as 'info' | 'warning' | 'error' | 'success',
                    title: `Orden ${order.id.slice(-8)} actualizada`,
                    message: `Estado cambiado a: ${order.status}`,
                    category: 'orders',
                    actionRequired: false,
                    relatedEntityId: order.id,
                    relatedEntityType: 'order',
                    data: { orderId: order.id, newStatus: order.status },
                    isRead: Math.random() < 0.3,
                    createdAt: sql`NOW() - INTERVAL '${sql.raw(faker.number.int({ min: 1, max: 48 }).toString())} hours'`
                };

                await dbInstance.insert(schemaInstance.notifications).values(orderNotification).onConflictDoNothing();
            }

            console.log('‚úÖ Notificaciones realistas sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando notificaciones (PostgreSQL):', err); }

        // Seed example petitions
        try {
            for (const type of petitionTypes) {
                for (const status of petitionStatuses) {
                    const petitionDaysAgo = faker.number.int({ min: 1, max: 90 });
                    const petitionDateSql = sql`NOW() - INTERVAL '${sql.raw(petitionDaysAgo.toString())} days'`;

                    await dbInstance.insert(schemaInstance.petitions).values({
                        type,
                        title: `${type} - ${faker.lorem.sentence(4)}`,
                        description: faker.lorem.paragraphs(2),
                        status,
                        createdAt: petitionDateSql
                    }).onConflictDoNothing();
                }
            }
            console.log('‚úÖ Peticiones de ejemplo sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando peticiones de ejemplo (PostgreSQL):', err); }

        // Seed homepage slides with enhanced images
        try {
            console.log('üè† Creando slides de p√°gina principal con im√°genes optimizadas...');
            for (let i = 0; i < homepageSlidesTemplates.length; i++) {
                const slideTemplate = homepageSlidesTemplates[i];

                // Get enhanced image for homepage slide
                const imageResult = await imageService.getHomepageSlideImage(
                    i.toString(),
                    slideTemplate.title
                );

                const slideData = {
                    ...slideTemplate,
                    imageUrl: imageResult.url
                };

                await dbInstance.insert(schemaInstance.homepageSlides).values(slideData).onConflictDoNothing();

                if (imageResult.isExisting) {
                    console.log(`‚ôªÔ∏è  Slide ${i + 1}: imagen existente reutilizada`);
                } else {
                    console.log(`‚úÖ Slide ${i + 1}: nueva imagen cargada (${imageResult.source})`);
                }
            }
            console.log('‚úÖ Slides de p√°gina principal sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando slides de p√°gina principal (PostgreSQL):', err); }

        // Seed user addresses for customers
        try {
            const customerUsers = await dbInstance.select().from(schemaInstance.users).where(eq(schemaInstance.users.role, 'customer'));

            for (const customer of customerUsers) {
                // Each customer gets 1-2 addresses
                const numAddresses = faker.number.int({ min: 1, max: 2 });
                for (let i = 0; i < numAddresses; i++) {
                    await dbInstance.insert(schemaInstance.userAddresses).values({
                        userId: customer.id,
                        type: i === 0 ? 'shipping' : 'billing',
                        isDefault: i === 0,
                        fullName: customer.name || `${faker.person.firstName()} ${faker.person.lastName()}`,
                        street: `${faker.location.streetAddress()}, ${faker.location.secondaryAddress()}`,
                        city: faker.helpers.arrayElement(['Torre√≥n', 'Saltillo', 'Monterrey', 'G√≥mez Palacio', 'Lerdo']),
                        state: faker.helpers.arrayElement(['Coahuila', 'Nuevo Le√≥n', 'Durango']),
                        postalCode: faker.location.zipCode('####'),
                        country: 'M√©xico',
                        phone: `+52 871 ${faker.string.numeric(7)}`,
                        instructions: Math.random() < 0.5 ? faker.lorem.sentence() : null,
                    }).onConflictDoNothing();
                }
            }
            console.log('‚úÖ Direcciones de usuarios sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando direcciones de usuarios (PostgreSQL):', err); }

        // Seed product reviews
        try {
            const customerUsers = await dbInstance.select().from(schemaInstance.users).where(eq(schemaInstance.users.role, 'customer'));
            const allProducts = await dbInstance.select().from(schemaInstance.products).limit(20);

            const reviewTitles = [
                'Excelente calidad',
                'Muy recomendado',
                'Perfecto para regalo',
                'Super√≥ mis expectativas',
                'Bell√≠simo producto',
                'Calidad premium',
                'Muy satisfecho con la compra',
                'Producto aut√©ntico',
                'Entrega r√°pida y segura',
                'Exactamente como se describe'
            ];

            const reviewComments = [
                'El producto lleg√≥ en perfectas condiciones y la calidad es excepcional. Muy contento con la compra.',
                'Hermoso regalo, mi familia qued√≥ encantada. La presentaci√≥n es muy elegante.',
                'Super√≥ todas mis expectativas. La atenci√≥n al detalle es incre√≠ble.',
                'Producto aut√©ntico y de muy buena calidad. Definitivamente volver√≠a a comprar.',
                'Entrega muy r√°pida y el empaque cuidadoso. El producto es tal como se describe.',
                'Excelente relaci√≥n calidad-precio. Lo recomiendo ampliamente.',
                'Un regalo perfecto para ocasiones especiales. La calidad se nota desde el primer momento.',
                'Producto √∫nico y hermoso. La artesan√≠a mexicana en su m√°xima expresi√≥n.',
            ];

            for (const product of allProducts) {
                // Each product gets 2-5 reviews
                const numReviews = faker.number.int({ min: 2, max: 5 });
                const selectedCustomers = faker.helpers.arrayElements(customerUsers, numReviews);

                for (const customer of selectedCustomers) {
                    const reviewDaysAgo = faker.number.int({ min: 1, max: 60 });
                    const reviewDateSql = sql`NOW() - INTERVAL '${sql.raw(reviewDaysAgo.toString())} days'`;

                    await dbInstance.insert(schemaInstance.productReviews).values({
                        productId: product.id,
                        userId: customer.id,
                        rating: faker.number.int({ min: 3, max: 5 }), // Mostly positive reviews
                        title: faker.helpers.arrayElement(reviewTitles),
                        comment: faker.helpers.arrayElement(reviewComments),
                        isVerifiedPurchase: Math.random() < 0.7, // 70% verified purchases
                        isApproved: Math.random() < 0.9, // 90% approved
                        createdAt: reviewDateSql,
                    }).onConflictDoNothing();
                }
            }
            console.log('‚úÖ Rese√±as de productos sembradas exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando rese√±as de productos (PostgreSQL):', err); }

        // Seed discount codes
        try {
            // Create safe future dates for discount codes using PostgreSQL SQL functions
            const discountCodes = [
                {
                    code: 'BIENVENIDO10',
                    type: 'percentage' as const,
                    value: 10,
                    minOrderAmount: 50000, // $500 pesos
                    maxUses: 100,
                    usedCount: faker.number.int({ min: 5, max: 25 }),
                    isActive: true,
                    expiresAt: sql`NOW() + INTERVAL '30 days'`, // 30 days
                },
                {
                    code: 'ENVIOGRATIS',
                    type: 'free_shipping' as const,
                    value: 0,
                    minOrderAmount: 100000, // $1000 pesos
                    maxUses: 50,
                    usedCount: faker.number.int({ min: 10, max: 30 }),
                    isActive: true,
                    expiresAt: sql`NOW() + INTERVAL '60 days'`, // 60 days
                },
                {
                    code: 'NAVIDAD2025',
                    type: 'percentage' as const,
                    value: 20,
                    minOrderAmount: 75000, // $750 pesos
                    maxUses: 200,
                    usedCount: faker.number.int({ min: 50, max: 100 }),
                    isActive: true,
                    expiresAt: sql`'2025-12-31 23:59:59'::timestamp`, // December 31, 2025
                },
                {
                    code: 'PRIMERA100',
                    type: 'fixed_amount' as const,
                    value: 10000, // $100 pesos off
                    minOrderAmount: 50000, // $500 pesos minimum
                    maxUses: 500,
                    usedCount: faker.number.int({ min: 200, max: 400 }),
                    isActive: true,
                    expiresAt: sql`NOW() + INTERVAL '90 days'`, // 90 days
                }
            ];

            for (const discountCode of discountCodes) {
                await dbInstance.insert(schemaInstance.discountCodes).values(discountCode).onConflictDoNothing();
            }
            console.log('‚úÖ C√≥digos de descuento sembrados exitosamente (PostgreSQL)');
        } catch (err) { console.log('‚ùå Error sembrando c√≥digos de descuento (PostgreSQL):', err); }

        console.log('\nüéâ ¬°Datos realistas en espa√±ol con im√°genes sembrados exitosamente!');
        console.log('üìä Resumen completo:');
        console.log(`   ‚Ä¢ ${spanishCategories.length} categor√≠as en espa√±ol`);
        console.log(`   ‚Ä¢ ${[...spanishProducts, ...additionalSpanishProducts].length} productos con descripciones detalladas`);
        console.log(`   ‚Ä¢ ${spanishOccasions.length} ocasiones especiales`);
        console.log(`   ‚Ä¢ ${statesData.length} estados mexicanos`);
        console.log(`   ‚Ä¢ ${deliveryZonesData.length} zonas de entrega`);
        console.log(`   ‚Ä¢ ${homepageSlidesTemplates.length} slides de p√°gina principal`);
        console.log('');
        console.log('üë• Usuarios realistas:');
        console.log('   ‚Ä¢ 2 administradores con credenciales completas');
        console.log('   ‚Ä¢ 3 empleados con registros de empleados');
        console.log('   ‚Ä¢ 2 proveedores con perfiles de negocio');
        console.log('   ‚Ä¢ 5 clientes con cuentas completas');
        console.log('');
        console.log('üõí Comportamiento de ecommerce:');
        console.log('   ‚Ä¢ Sesiones activas para clientes y hu√©spedes');
        console.log('   ‚Ä¢ Carritos con productos para simular compras activas');
        console.log('   ‚Ä¢ Favoritos personalizados por cliente');
        console.log('   ‚Ä¢ 75 √≥rdenes realistas con distribuci√≥n temporal');
        console.log('   ‚Ä¢ Estados de √≥rdenes diversos (60% entregadas, 20% enviadas, etc.)');
        console.log('   ‚Ä¢ Precios calculados basados en productos reales');
        console.log('   ‚Ä¢ Notificaciones realistas para dashboard de admin');
        console.log('   ‚Ä¢ Direcciones de usuarios y √≥rdenes');
        console.log('   ‚Ä¢ Rese√±as de productos con calificaciones');
        console.log('   ‚Ä¢ C√≥digos de descuento activos');
        console.log('');
        console.log('üì∏ Contenido multimedia:');
        console.log('   ‚Ä¢ Im√°genes optimizadas con fuentes m√∫ltiples:');
        console.log('     - Im√°genes del usuario reutilizadas inteligentemente');
        console.log('     - API de Unsplash con l√≠mite de tasa (50/hora)');
        console.log('     - Placeholders como respaldo');
        console.log('   ‚Ä¢ Todas las im√°genes almacenadas en Vercel Blob');
        console.log('   ‚Ä¢ Precios en pesos mexicanos');
        console.log('');
        console.log('üîë Credenciales de acceso:');
        console.log('   üë®‚Äçüíº Admin principal: admin@luzimarket.shop / LuziAdmin2024!');
        console.log('   üë©‚Äçüíº Admin secundario: maria.admin@luzimarket.shop / MariaAdmin123!');
        console.log('   üë∑‚Äç‚ôÇÔ∏è Empleado ventas: carlos.ventas@luzimarket.shop / Carlos123!');
        console.log('   üë©‚Äçüíª Empleado marketing: ana.marketing@luzimarket.shop / Ana123!');
        console.log('   üì¶ Empleado inventario: luis.inventario@luzimarket.shop / Luis123!');
        console.log('   üè¢ Proveedor 1: proveedor1@email.com / Proveedor123!');
        console.log('   üè™ Proveedor 2: proveedor2@email.com / Proveedor123!');
        console.log('   üõçÔ∏è Cliente ejemplo: sofia.cliente@email.com / Sofia123!');

    } catch (err) {
        console.error('üí• Error sembrando base de datos:', err instanceof Error ? err.stack : err);
        process.exit(1);
    }
}

async function loadSchemaAndRunSeed() {
    try {
        console.log('üóÑÔ∏è  Cargando esquema PostgreSQL...');
        const mainSchema = await import('./schema');
        const neonDb = db as NeonDatabase;
        await seed(neonDb, mainSchema);
    } catch (error) {
        console.error('üí• Error cargando esquema o sembrando:', error);
        process.exit(1);
    }
}

loadSchemaAndRunSeed().catch((err) => {
    console.error('üí• Error durante la carga del esquema o siembra:', err.stack || err);
    process.exit(1);
}); 