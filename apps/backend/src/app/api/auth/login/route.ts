// @ts-ignore: Allow necessary imports without type declarations
import bcrypt from 'bcryptjs';
// @ts-ignore: Allow jsonwebtoken import without type declarations
import jwt from 'jsonwebtoken';
import { NextRequest, NextResponse } from 'next/server';
import { StatusCodes } from 'http-status-codes';
import { dbService, eq } from '@/db/service';
import { users, sessions, cartItems, refreshTokens } from '@/db/schema';
import { randomBytes } from 'crypto';

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: User login
 *     description: Authenticate a user with email and password, returns a JWT token for future requests
 *     tags: [Authentication]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 description: User's email address
 *                 example: user@example.com
 *               password:
 *                 type: string
 *                 format: password
 *                 description: User's password
 *                 example: mySecurePassword123
 *     responses:
 *       200:
 *         description: Login successful
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 accessToken:
 *                   type: string
 *                   description: JWT authentication token
 *                   example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 *                 refreshToken:
 *                   type: string
 *                   description: Refresh token for obtaining new access tokens
 *                   example: abc123def456...
 *                 user:
 *                   type: object
 *                   description: User information (without password)
 *                   properties:
 *                     id:
 *                       type: string
 *                       example: lm_usr_abc123
 *                     email:
 *                       type: string
 *                       format: email
 *                       example: user@example.com
 *                     name:
 *                       type: string
 *                       example: John Doe
 *                     role:
 *                       type: string
 *                       example: customer
 *                     isActive:
 *                       type: boolean
 *                       example: true
 *                     createdAt:
 *                       type: integer
 *                       description: Unix timestamp
 *                       example: 1640995200
 *                     updatedAt:
 *                       type: integer
 *                       description: Unix timestamp
 *                       example: 1640995200
 *       400:
 *         description: Missing email or password
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Email and password required
 *       401:
 *         description: Invalid credentials
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Invalid credentials
 *       500:
 *         description: Login failed due to server error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
export async function POST(request: NextRequest) {
    try {
        const { email, password } = await request.json();
        if (!email || !password) {
            return NextResponse.json(
                { error: 'Email and password required' },
                { status: StatusCodes.BAD_REQUEST }
            );
        }

        // check credentials
        const user = await dbService.findFirst(users, eq(users.email, email));
        if (!user) {
            return NextResponse.json(
                { error: 'Invalid credentials' },
                { status: StatusCodes.UNAUTHORIZED }
            );
        }

        const isValid = await bcrypt.compare(password, user.password);
        if (!isValid) {
            return NextResponse.json(
                { error: 'Invalid credentials' },
                { status: StatusCodes.UNAUTHORIZED }
            );
        }

        // create new session for user (id generated by database)
        const newSessionRes = await dbService.insertReturning(sessions, {
            userId: user.id,
            isGuest: false
        });

        const newSessionId = (newSessionRes[0] as any).id;

        // attempt to merge guest cart if provided
        const authHeader = request.headers.get('Authorization') || '';
        if (authHeader.startsWith('Bearer ')) {
            try {
                const jwtSecret = process.env.JWT_SECRET || 'test-jwt-secret-for-e2e-tests';
                const payload = jwt.verify(authHeader.split(' ')[1], jwtSecret);
                if (typeof payload === 'object' && 'sessionId' in payload) {
                    const guestSessionId = (payload as any).sessionId;
                    await dbService.update(cartItems,
                        { sessionId: newSessionId },
                        eq(cartItems.sessionId, guestSessionId)
                    );
                }
            } catch (error) {
                // ignore invalid guest token
                console.error('Error merging guest cart:', error);
            }
        }

        // Get token durations from environment variables
        const refreshTokenDuration = parseInt(process.env.REFRESH_TOKEN_DURATION_HOURS || '168') * 60 * 60 * 1000; // Default 7 days in ms

        const jwtSecret = process.env.JWT_SECRET || 'test-jwt-secret-for-e2e-tests';
        const token = jwt.sign({
            sessionId: newSessionId,
            userId: user.id,
            email: user.email,
            role: user.role,
            isGuest: false
        }, jwtSecret, { expiresIn: '7d' });

        // Generate refresh token
        const refreshToken = randomBytes(64).toString('hex');
        const refreshTokenExpiry = new Date(Date.now() + refreshTokenDuration);

        console.log('[LOGIN] Creating refresh token for user:', user.email);
        console.log('[LOGIN] Refresh token length:', refreshToken.length);
        console.log('[LOGIN] Refresh token expires at:', refreshTokenExpiry.toISOString());

        await dbService.insert(refreshTokens, {
            userId: user.id,
            token: refreshToken,
            expiresAt: refreshTokenExpiry,
            isRevoked: false
        });

        console.log('[LOGIN] Refresh token saved to database successfully');

        // Extract user data without password
        const userResponse = {
            id: user.id,
            email: user.email,
            name: user.name,
            role: user.role,
            isActive: user.isActive,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt
        };

        return NextResponse.json({
            accessToken: token,
            refreshToken,
            user: userResponse
        }, { status: StatusCodes.OK });
    } catch (error) {
        console.error('Error during login:', error);
        return NextResponse.json({ error: 'Login failed' }, { status: StatusCodes.INTERNAL_SERVER_ERROR });
    }
} 